<?php
/**
 * Custom Drupal module for the ISSA Membership approval process
 *
 * @author Klaas Eikelboom (CiviCooP)
 * @date 19 Jan 2018
 * @license AGPL-3.0
 */

const ISSA_APPROVAL_EMPLOYEE_TYPE_ID = 'issa_approval_employee_type_id';
/**
 * technical id of the relationship type of a contact person
 * is set in the administration page
 */
const ISSA_APPROVAL_CONTACTPERSON_TYPE_ID = 'issa_approval_contactperson_type_id';
const ISSA_APPROVAL_WEBFORM_NID = 'issa_approval_webform_nid';
const ISSA_APPROVAL_MEMBER_REGISTRATION_NID = 'issa_approval_member_registration_nid';
const ISSA_APPROVAL_DOCUMENTS_NID = 'issa_approval_documents_nid';
const ISSA_APPROVAL_LETTER_NID = 'issa_approval_letter_nid';
const ISSA_APPROVAL_COLLEAGUES_NID = 'issa_approval_colleagues_nid';
const ISSA_APPROVAL_EMPLOYEE_NID = 'issa_approval_employees_nid';
const ISSA_APPROVAL_PERMISSION = 'issa approval check list';
const ISSA_APPROVAL_BOARD_PERMISSION = 'issa approval board';
const ISSA_APPROVAL_SECRETARIAL_COMMENTS_FIELD_ID = 'issa_approval_secretarial_comments_field_id';

/**
 * Implementation of the permission hook
 * @return array
 */
function issa_approval_permission() {
  return [
    ISSA_APPROVAL_PERMISSION => [
      'title' => t('Check list for applicants'),
      'description' => t('Use the ISSA approval check list for applicants.'),
    ],
    ISSA_APPROVAL_BOARD_PERMISSION =>  [
      'title' => t('Check list for the board'),
      'description' => t('Show overview of the approval process'),
    ],
  ];
}

/**
 * implementation of the menu hook
 * @return array
 */
function issa_approval_menu() {
  $items = [];
  $items['admin/config/system/issa-approval'] = [
    'title' => 'Issa custom module',
    'description' => 'Configuration of the approval module',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['_issa_approval_config_form'],
    'access arguments' => ['access administration pages'],
    'type' => MENU_NORMAL_ITEM,
  ];
  $items['issa-approval/check-list'] = [
    'title' => 'Check the approval steps',
    'description' => 'Checklist for the approver',
    'page callback' => '_issa_approval_checklist',
    'access arguments' => [ISSA_APPROVAL_PERMISSION],
    'type' => MENU_NORMAL_ITEM,
  ];
  $items['issa-approval/board-check-list/%'] = [
    'title' => 'Overview of a member application for the board',
    'description' => 'Overview of a member application for the board',
    'page callback' => '_issa_approval_board_checklist',
    'page arguments' => array(2),
    'access arguments' => [ISSA_APPROVAL_BOARD_PERMISSION],
    'type' => MENU_CALLBACK,
  ];
  $items['issa-approval/view-comments/%'] = array(
    'title' => 'View comments',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('issa_approval_view_comments',2),
    'access callback' => 'user_access',
    'access arguments' => [ISSA_APPROVAL_BOARD_PERMISSION],
  );
  return $items;
}

/**
 * Generates a page that the applicant can use as checklist to see
 * what actions he has to do to complete the member registration process.
 *
 * @return array
 */
function _issa_approval_checklist() {

  $output = [];

  // if no memberregistration is known the applicant is directly
  // redirected to the registration form
  if (!issa_approval_helper::webform_submitted(ISSA_APPROVAL_MEMBER_REGISTRATION_NID)) {
    drupal_goto(issa_approval_helper::webform_link(ISSA_APPROVAL_MEMBER_REGISTRATION_NID));
  }
  else {
    $reglink = l('submission', issa_approval_helper::webform_link(ISSA_APPROVAL_MEMBER_REGISTRATION_NID));
    $output['registration'] = [
      '#type' => 'markup',
      '#markup' => "<p>[x] Your have submitted your membership registration. View your $reglink</p>",
    ];
  }

  if (!issa_approval_helper::webform_submitted(ISSA_APPROVAL_DOCUMENTS_NID)) {
    $doclink = l('documents', issa_approval_helper::webform_link(ISSA_APPROVAL_DOCUMENTS_NID));
    $output['approval_docs'] = [
      '#type' => 'markup',
      '#markup' => "<p>[ ]You must add documents with the $doclink form</p>",
    ];
  }
  else {
    $doclink = l('documents', issa_approval_helper::webform_link(ISSA_APPROVAL_DOCUMENTS_NID));
    $output['approval_docs'] = [
      '#type' => 'markup',
      '#markup' => "<p>[x] You have submitted the documents. View them with $doclink form</p>",
    ];

  }

  if (!issa_approval_helper::webform_submitted(ISSA_APPROVAL_LETTER_NID)) {
    $letterlink = l('letter of commitment', issa_approval_helper::webform_link(ISSA_APPROVAL_LETTER_NID));
    $output['letter'] = [
      '#type' => 'markup',
      '#markup' => "<p>[ ] You must add a letter of commitment with the $letterlink form</p>",
    ];
  }
  else {
    $letterlink = l('letter of commitment', issa_approval_helper::webform_link(ISSA_APPROVAL_LETTER_NID));
    $output['letter'] = [
      '#type' => 'markup',
      '#markup' => "<p>[x] You have submitted the letter of commitment. View them with $letterlink form</p>",
    ];
  }

  $colleagues = array_map(function($element){ return $element['edit_link']; },
    issa_approval_helper::colleagues(issa_approval_helper::currentUser())
  );
  $collink = l('Add colleagues', 'add-colleagues');
  if (empty($colleagues)) {
    $output['colleagues'] = [
      '#type' => 'markup',
      '#markup' => "<p>You did not enter colleagues, you can do so with $collink</p>",
    ];
  }
  else {
    $output['colleagues-pre'] = [
      '#type' => 'markup',
      '#markup' => "<p>You added the following colleagues:</p>",
    ];
    $output['colleagues-list'] = [
      '#items' => $colleagues,
      '#theme' => 'item_list',
    ];
    $output['colleagues'] = [
      '#type' => 'markup',
      '#markup' => "<p>Complete it with $collink</p>",
    ];
  }

  return $output;
}

/**
 * Generates a page for a board member that needs a checklist
 * to have alle the information for the approval
 */

function _issa_approval_board_checklist($orgnId){


  /* some error checking fo an inclomplete application
      this page cannot be showed
  */
  $caseId = issa_approval_helper::caseId($orgnId);
  if(empty($caseId)){
    return "Oops - could not find a valid case for {$orgnId} ";
  }

  $contactId = issa_approval_helper::contactPerson($orgnId);
  if(empty($contactId)){
    return  "Oops - could not find a valid contact person for {$orgnId}";
  }

  // in the $output var the form is generated
  $output = [];
  $registrationTasks  = array(
    array('text' => t('Membership registration form'),
          'webform' => ISSA_APPROVAL_MEMBER_REGISTRATION_NID,
    ),
    array('text' => t('Uploaded documents'),
      'webform' => ISSA_APPROVAL_DOCUMENTS_NID,
    ),
    array('text' => t('Letter of commitment'),
      'webform' => ISSA_APPROVAL_LETTER_NID,
    ),

  );

  $output['h3-secretarial comments'] = [
    '#type' => 'markup',
    '#markup' => "<h3>Secretarial Comments</h3>",
  ];

  $mc = issa_approval_helper::caseSecretarialComments($caseId);

  if($mc){
    $output['secreterial comments'] = [
      '#type' => 'markup',
      '#markup' => $mc
    ];
  }

  $output['h3-tasks'] = [
     '#type' => 'markup',
     '#markup' => "<h3>Information of the applicant</h3>",
  ];

  foreach($registrationTasks as $task){
    $nodeUrl = issa_approval_helper::webform_view_link($contactId,$task['webform']);
    if($nodeUrl){
        $taskLinks [] = l($task['text'],$nodeUrl);
    }
  }
  if(isset($taskLinks)) {
    $output['tasks'] = [
      '#theme' => 'item_list',
      '#items' => $taskLinks,
    ];
  }

  $colleagues = array_map(function($element){ return $element['display_name']; },
    issa_approval_helper::colleagues($contactId));

  if($colleagues) {

    $output['colheading'] = [
      '#type' => 'markup',
      '#markup' => '<h3>Employees of the organisation</h3>'
    ];

    $output['colleagues'] =
      [
        '#items' => $colleagues,
        '#theme' => 'item_list',
      ];


    $output['approval result'] = [
      '#type' => 'markup',
      '#markup' => "<h3>Voting</h3>",
    ];

    $approvallink = issa_approval_helper::approval_link($orgnId,variable_get(ISSA_APPROVAL_WEBFORM_NID));
    $commentslink = l('comments','issa-approval/view-comments/'.$orgnId);

    $output['approval'] = [
      '#theme' => 'item_list',
      '#items' => ["{$approvallink}","Review the {$commentslink}"]
    ];

  }

  return $output;

}

/**
 * generates link to the membership approval form
 */
function _issa_approval_membership_registration() {
  issa_approval_helper::webform_link(ISSA_APPROVAL_MEMBER_REGISTRATION_NID);
}

/**
 * Admin form for the configuration of all the webforms that are
 * part of this module
 *
 * @param $form
 * @param $form_state
 *
 * @return mixed
 * @throws \CiviCRM_API3_Exception
 */
function _issa_approval_config_form($form, &$form_state) {

  // Option list of all the created webforms
  $query = db_query("SELECT nid, title FROM {node} WHERE type='webform'");
  $webformOptions = [];
  $records = $query->fetchAll();
  foreach ($records as $record) {
    $webformOptions[$record->nid] = $record->title;
  }

  civicrm_initialize();
  $result = civicrm_api3('RelationshipType', 'get', []);
  $relationshipTypeOptions = [];
  foreach ($result['values'] as $value) {
    if (isset($value['label_a_b'])) {
      $relationshipTypeOptions[$value['id']] = $value['label_a_b'];
    }
  }

  $result = $result = civicrm_api3('CustomField', 'get', array(
    'sequential' => 1,
    'is_active' => 1,
    'options' => array(
      'limit' => 0,
      'sort'  => 'label',
    ),
  ));
  $customFieldOptions = [];
  foreach ($result['values'] as $value) {
      $customFieldOptions[$value['id']] = $value['label'];
  }

  $form[ISSA_APPROVAL_WEBFORM_NID] = [
    "#title" => 'Select the webform, that must be used for the approval',
    '#type' => 'select',
    '#options' => $webformOptions,
    '#default_value' => variable_get(ISSA_APPROVAL_WEBFORM_NID, array_keys($webformOptions)[0]),
  ];

  $form[ISSA_APPROVAL_MEMBER_REGISTRATION_NID] = [
    "#title" => 'Select the webform, that must be used for the member registration',
    '#type' => 'select',
    '#options' => $webformOptions,
    '#default_value' => variable_get(ISSA_APPROVAL_MEMBER_REGISTRATION_NID, array_keys($webformOptions)[0]),
  ];

  $form[ISSA_APPROVAL_DOCUMENTS_NID] = [
    "#title" => 'Select the webform, that must be used to upload the documents',
    '#type' => 'select',
    '#options' => $webformOptions,
    '#default_value' => variable_get(ISSA_APPROVAL_DOCUMENTS_NID, array_keys($webformOptions)[0]),
  ];

  $form[ISSA_APPROVAL_LETTER_NID] = [
    "#title" => 'Select the webform, that must be used to upload the letter of commitment',
    '#type' => 'select',
    '#options' => $webformOptions,
    '#default_value' => variable_get(ISSA_APPROVAL_LETTER_NID, array_keys($webformOptions)[0]),
  ];

  $form[ISSA_APPROVAL_EMPLOYEE_NID] = [
    "#title" => 'Select the webform, that can be used for the end date and name changes of the employee relation ship',
    '#type' => 'select',
    '#options' => $webformOptions,
    '#default_value' => variable_get(ISSA_APPROVAL_EMPLOYEE_NID, array_keys($webformOptions)[0]),
  ];

  $form[ISSA_APPROVAL_EMPLOYEE_TYPE_ID] = [
    "#title" => 'Select the relationships that defines the colleagues (maybe employee?)',
    '#type' => 'select',
    '#options' => $relationshipTypeOptions,
    '#default_value' => variable_get(ISSA_APPROVAL_EMPLOYEE_TYPE_ID, 5),
  ];

  $form[ISSA_APPROVAL_CONTACTPERSON_TYPE_ID] = [
    "#title" => 'Select the relationship that defines the contactperson of the organisation',
    '#type' => 'select',
    '#options' => $relationshipTypeOptions,
    '#default_value' => variable_get(ISSA_APPROVAL_CONTACTPERSON_TYPE_ID, 5),
  ];

  $form[ISSA_APPROVAL_SECRETARIAL_COMMENTS_FIELD_ID] = [
    "#title" => 'Select the custom field of the secretarial comments',
    '#type' => 'select',
    '#options' => $customFieldOptions,
    '#default_value' => variable_get(ISSA_APPROVAL_SECRETARIAL_COMMENTS_FIELD_ID, array_keys($customFieldOptions)[0]),
  ];

  return system_settings_form($form);
}

/**
 * Implementation of a hook that adds blocks
 * @return mixed
 */
function issa_approval_block_info() {
  $blocks['issa_approval_colleagues'] = [
    'info' => t('Colleagues'),
    'cache' => DRUPAL_NO_CACHE
  ];
  $blocks['issa_approval_applicant_menu'] = [
    'info' => t('Applicant Menu'),
    'cache' => DRUPAL_NO_CACHE
  ];
  return $blocks;
}

/**
 * Implementation of a hook that adds blocks
 * Two blocks are added
 * - the colleagues of the logged in person
 * - a menu linked to the webforms that are used gather info for the
 *   approval process
 * @param string $delta
 *
 * @return array
 */
function issa_approval_block_view($delta = '') {
  $block = [];
  switch ($delta) {
    case 'issa_approval_colleagues':
      $colleagues = array_map(function($element){ return $element['edit_link']; },
         issa_approval_helper::colleagues(issa_approval_helper::currentUser())
      );
      $block['subject'] = t('Your organisation');
      $block['content'] = [
        'colleagues' => [
          [
            '#items' => $colleagues,
            '#theme' => 'item_list',
          ],
        ],
      ];
      break;
    case 'issa_approval_applicant_menu':
      $block['subject'] = t('Applicant');
      $links = [
        l('Our application form', issa_approval_helper::webform_link(ISSA_APPROVAL_MEMBER_REGISTRATION_NID)),
        l('Upload your documents', issa_approval_helper::webform_link(ISSA_APPROVAL_DOCUMENTS_NID)),
        l('Letter of commitment', issa_approval_helper::webform_link(ISSA_APPROVAL_LETTER_NID)),
        l('Add colleagues', 'add-colleagues'),
        l('Member applications','member-applications')
      ];
      $block['content'] = [
        'links' => [
          [
            '#items' => $links,
            '#theme' => 'item_list',
          ],
        ],
      ];
      break;
  }
  return $block;
}

/**
 * Generates the form that shows the comments on a vote. Included are the
 * name and the email of the voter.
 *
 * @param $form
 * @param $form_state
 * @param $contactId of the applicant
 *
 * @return array
 * @throws \CiviCRM_API3_Exception
 */
function issa_approval_view_comments($form, &$form_state, $contactId) {

  civicrm_initialize();
  $config = issa_approval_config::singleton();
  $sql = "SELECT act.id AS activity_id
          ,      act.activity_date_time AS activity_date_time
          ,      act.details AS activity_details
          ,      ad.{$config->getApproveDenyCustomFields()['Approve']} approvedeny
          ,      cnt.display_name AS display_name
          ,      email.email AS email
          FROM   civicrm_case cas
          JOIN   civicrm_case_contact cc     ON (cc.case_id = cas.id AND cc.contact_id=%1)
          JOIN   civicrm_case_activity cact  ON (cact.case_id = cas.id)
          JOIN   civicrm_activity      act   ON (act.id = cact.activity_id AND act.is_deleted=0 AND act.activity_type_id ={$config->getApprovalActivityTypeId()} AND act.is_current_revision=1)
          JOIN   civicrm_activity_contact acc ON (acc.activity_id = act.id and acc.record_type_id=2)
          JOIN   civicrm_contact          cnt ON (acc.contact_id  = cnt.id)
          JOIN   {$config->getApproveDenyCustomTable()} ad ON (ad.entity_id = act.id)
          LEFT JOIN civicrm_email         email ON (email.contact_id=cnt.id AND email.is_primary=1)
          WHERE  cas.case_type_id = {$config->getApprovalCaseTypeId()}
         ";

  $dao = CRM_Core_DAO::executeQuery($sql, [
    '1' => [$contactId, 'Integer'],
  ]);

  $rows = [];
  while ($dao->fetch()) {
    $row = array(
      'activity_date_time' => $dao->activity_date_time,
      'activity_details' => $dao->activity_details,
      'verdict' => $dao->approvedeny?'Yes':'No',
      'display_name' => $dao->display_name,
      'email' => $dao->email
    );
    $rows[$dao->activity_id]= $row;
  }

  $orgname = civicrm_api3('Contact','getvalue',array(
    'id' => $contactId,
    'return' => 'display_name'
  ));

  $form = array();
  $form['case']['#markup'] = "Applicant : $orgname";
  $form['contactId']['#type'] = 'hidden';
  $form['contactId']['#value'] = $contactId;


  $form['comments']['table']['#theme'] = 'table';
  $form['comments']['table']['#header'] = [
    'Date','Details','Agreement','Comments by','Email'
  ];
  $form['comments']['table']['#rows'] = $rows;
  $form['comments']['table']['#attributes'] = array('width' => '100%');

  $form['submit']['#type'] = 'submit';
  $form['submit']['#value'] = "Back to overview of $orgname";
  $form['submit']['#submit'] = array('_issa_approval_view_comments_submit');
  return $form;
}

/**
 * Submit for returning to member applications
 */
function _issa_approval_view_comments_submit($form){
  drupal_goto('issa-approval/board-check-list/'.$form['contactId']['#value']);
}


/* hook_views_api() */
/**
 * @return array
 */
function issa_approval_views_api() {
  return [
    'api' => 3.0,
    'path' => drupal_get_path('module', 'issa_approval') . '/views',
  ];
}